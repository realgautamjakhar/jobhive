// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    Job           Job[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    id         String   @id @default(auto()) @map("_id") @db.ObjectId

    @@unique([identifier, token])
}

model Job {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    title     String //Job title
    desc      String? //Job Description and skills
    type      JobType   @default(CONTRACT) //Full time part time etc
    workPlace WorkPlace @default(OFFICE) // office remote hybrid
    location  String?   @default("")

    education String  @default("Any")
    role      String? //Job roles like full stack etc

    salary        Int? @default(0)
    experienceMin Int? @default(0)
    experienceMax Int? @default(0)

    applyUrl         String?
    applyEmail       String?
    applyInstruction String?

    featured Boolean @default(false)
    approved Boolean @default(false)
    rejected Boolean @default(false)

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

    company       Company     @relation(fields: [companyId], references: [id])
    companyId     String      @db.ObjectId
    subCategory   Subcategory @relation(fields: [subCategoryId], references: [id])
    subCategoryId String      @db.ObjectId

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
    TEMPORARY
}

enum WorkPlace {
    OFFICE
    REMOTE
    HYBRID
}

model Category {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    subcategories Subcategory[]
    Job           Job[]
}

model Subcategory {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @db.ObjectId
    Job        Job[]
}

model Company {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    name     String
    desc     String
    logo     String
    website  String
    linkedin String?
    jobs     Job[]
}
